generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  Donor
  Patient
}

model User {
  id        String   @id @unique @default(cuid())
  name      String
  address   String
  phone     String
  role      Roles
  email     String   @unique
  password  String
  avatarUrl String?
  donor     Donor?
  patient   Patient?
}

model Donor {
  id                         String                 @id @unique @default(cuid())
  dateOfBirth                DateTime
  currentHealthStatus        String
  donatedBloodPreviously     Boolean                @default(false)
  previousBloodDonationDates DateTime[]
  bloodGroup                 String
  medicationsCurrentlyTaking String[]
  travelHistory              String[]
  drugUseHistory             String[]
  height                     String?
  weight                     String?
  aadharNumber               String?
  allergies                  String[]
  pregnant                   Boolean                @default(false)
  gender                     String
  user                       User                   @relation(fields: [userId], references: [id])
  userId                     String                 @unique
  bloodDonationRequests      BloodDonationRequest[]
}

model Hospital {
  id   String @id @unique @default(cuid())
  name String

  patients Patient[]
}

model Patient {
  id                 String              @id @unique @default(cuid())
  affiliatedHospital Hospital?           @relation(fields: [hospitalId], references: [id])
  hospitalId         String?
  user               User                @relation(fields: [userId], references: [id])
  userId             String              @unique
  BloodDonationNeed  BloodDonationNeed[]
}

model BloodDonationRequest {
  id             String    @id @unique @default(cuid())
  donor          Donor     @relation(fields: [donorId], references: [id])
  donorId        String
  availableOn    DateTime
  onAlternateDay Boolean   @default(false)
  alternateDay   DateTime?
}

model BloodDonationNeed {
  id                  String         @id @unique @default(cuid())
  patient             Patient        @relation(fields: [patientId], references: [id])
  patientId           String
  bloodGroup          String
  requiredOn          DateTime
  component           BloodComponent
  dateOfBirth         DateTime
  currentHealthStatus String
  letterFromDoctor    String?
}

enum BloodComponent {
  WholeBlood      @map("Whole Blood")
  RedBloodCells   @map("Red Blood Cells")
  Platelets
  Plasma
  Cryoprecipitate
}
